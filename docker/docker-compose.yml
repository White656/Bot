version: '3.9'


x-defaults: &default
  logging:
    driver: json-file
    options:
      max-size: "10m"
      max-file: "3"

services:
  etcd:
    <<: *default
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.14
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd-storage:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: [ "CMD", "etcdctl", "endpoint", "health" ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      bot_network:
        ipv4_address: ${ETCD_DOCKER_IP}

  minio:
    <<: *default
    container_name: milvus-minio
    image: minio/minio:latest
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "127.0.0.1:${MINIO_PORT_INTERNAL}:${MINIO_PORT}"
      - "127.0.0.1:${MINIO_WEBUI_INTERNAL_PORT}:${MINIO_WEBUI_PORT}"
    volumes:
      - minio-storage:/data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      bot_network:
        ipv4_address: ${MINIO_DOCKER_IP}


  standalone:
    <<: *default
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.5.1
    command: [ "milvus", "run", "standalone" ]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - milvus-storage:/var/lib/milvus
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9091/healthz" ]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - '127.0.0.1:${MILVUS_GRPC_INTERNAL_PORT}:${MILVUS_GRPC_PORT}'
      - '127.0.0.1:${MILVUS_API_INTERNAL_PORT}:${MILVUS_API_PORT}'
    depends_on:
      - etcd
      - minio
    networks:
      bot_network:
        ipv4_address: ${MILVUS_DOCKER_IP}


  postgres:
    <<: *default
    container_name: postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - '127.0.0.1:${DB_PORT}:${DB_PORT_INTERNAL}'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U cy' ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      bot_network:
        ipv4_address: ${DB_DOCKER_IP}


  redis:
    <<: *default
    image: redis:latest
    container_name: redis_container
    ports:
      - '127.0.0.1:${REDIS_PORT_INTERNAL}:${REDIS_PORT}'
    volumes:
      - redis_data:/data
    networks:
      bot_network:
        ipv4_address: ${REDIS_DOCKER_IP}

  worker:
    <<: *default
    build:
      context: ../
    command: celery --app package.celery.worker.celery worker --loglevel=info
    volumes:
      - celery_volume:/usr/src
    depends_on:
      - redis
    networks:
      bot_network:
        ipv4_address: ${WORKER_DOCKER_IP}

  dashboard:
    <<: *default
    build: ../
    command: celery --broker=${DASHBOARD_BROKER_URI} flower --port=${DASHBOARD_PORT}
    ports:
      - '127.0.0.1:${DASHBOARD_PORT_INTERNAL}:${DASHBOARD_PORT}'
    depends_on:
      - redis
      - worker
    networks:
      bot_network:
        ipv4_address: ${DASHBOARD_DOCKER_IP}

  backend:
    <<: *default
    build: ../
    ports:
      - '127.0.0.1:${BACKEND_PORT_INTERNAL}:${BACKEND_PORT}'
    depends_on:
      - worker
      - redis
      - postgres
      - minio
      - etcd
    volumes:
      - ${BACKEND_PATH}:/app
    networks:
      bot_network:
        ipv4_address: ${BACKEND_DOCKER_IP}

volumes:
  minio-storage:
  milvus-storage:
  etcd-storage:
  postgres-data:
  celery_volume:
  redis_data:

networks:
  bot_network:
    name: "botnet"
    ipam:
      driver: default
      config:
        - subnet: "192.168.0.0/24"
          gateway: "192.168.0.1"