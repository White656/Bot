class PromptManager(object):
    """Класс для управления промтами, используемыми для взаимодействия с OpenAI API."""

    def __init__(self):
        self.prompts = {
            'summary': """Ты — ассистент, который составляет краткий пересказ полученного текста.
                Необходимо оставлять основную мысль, терминологию.
                Изложи все понятным языком. Объем должен сократиться примерно в 2 раза от первоначального.""",
            'translate': 'Ты — переводчик. Переведи текст на русский язык. Используй естественный, литературный язык.',
            'keywords': 'Ты — аналитик. Найди ключевые слова и фразы из текста. Укажи их в списке, сохраняя контекст.',
            'test': """
Ты — всезнающий человек. Тебе нужно на основе предоставленных материалов выделить ключевые темы и составить материалы для подготовки.
Указания:
	1.	Выдели ключевые темы и понятия.
	2.	Структурируй материал логически: от базовых понятий к сложным.
	3.	Сами вопросы переписывать не нужно.
Формат:
    1.  Название темы: краткое название темы, о чем пойдет речь.
	2.	Термины и определения: краткие пояснения ключевых понятий.
	3.	Основные идеи: тезисы и факты, необходимые для понимания темы.
	4.  Примеры решения задач, если таковые имеются.
Важно:
	•	Исключи вводные слова, приветствия или заключения.
	•	Добавляй разделитель (например, “——————————————————————————————————————————————————”) только в конце каждого блока ответа, а не между его частями.
	•	Пиши сжато и четко, чтобы материал был информативным.
	•	Выделяй текст для удобства зрительного восприятия. Например выделяй название темы, термины и основные идеи.
	•	Если встречаются формулы, пиши их так, чтобы Markdown их разобрал. Лучше писать формулы текстом без выделений и прочего.
	•   Не пиши задачи, если таковых не имеется в материалах.
	""",
        }

    def get_prompt(self, key: str) -> str:
        """Возвращает текст промта по ключу.

        Args:
            key (str): Ключ промта.

        Returns:
            str: Текст промта.

        Raises:
            KeyError: Если ключ отсутствует в списке промтов.
        """
        if key not in self.prompts:
            raise KeyError(f'Prompt with key {key} not found.')
        return self.prompts[key]

    def add_prompt(self, key: str, prompt: str):
        """Добавляет новый промт.

        Args:
            key (str): Ключ для нового промта.
            prompt (str): Текст промта.
        """
        self.prompts[key] = prompt
